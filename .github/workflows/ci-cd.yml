name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  JAVA_VERSION: '17'
  NODE_VERSION: '18'

jobs:
  # Job 1: Smart Contract Tests
  test-contracts:
    name: Smart Contract Tests
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: contracts/package-lock.json

      - name: Install dependencies
        run: |
          cd contracts
          npm ci

      - name: Compile contracts
        run: |
          cd contracts
          npx hardhat compile

      - name: Run Hardhat tests
        run: |
          cd contracts
          npx hardhat test

      - name: Generate coverage report
        run: |
          cd contracts
          npx hardhat coverage

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: contract-coverage
          path: contracts/coverage/

  # Job 2: Backend Tests
  test-backend:
    name: Backend Tests
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: tokenization_test
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          java-version: ${{ env.JAVA_VERSION }}
          distribution: 'temurin'
          cache: 'maven'

      - name: Build with Maven
        run: |
          cd backend
          mvn clean install -DskipTests

      - name: Run tests
        env:
          SPRING_DATASOURCE_URL: jdbc:postgresql://localhost:5432/tokenization_test
          SPRING_DATASOURCE_USERNAME: test_user
          SPRING_DATASOURCE_PASSWORD: test_password
          JWT_SECRET: test-secret-key-for-ci-cd-pipeline-testing-only
          BESU_RPC_URL: http://localhost:8545
          DEPLOYER_PRIVATE_KEY: 0x8f2a55949038a9610f50fb23b5883af3b4ecb3c3bb792cbcefbd1542c692be63
        run: |
          cd backend
          mvn test

      - name: Generate coverage report
        run: |
          cd backend
          mvn jacoco:report

      - name: Upload coverage to artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: backend/target/site/jacoco/

  # Job 3: Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [test-contracts, test-backend]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy results to GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Job 4: Build Docker Images
  build-docker:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [test-contracts, test-backend]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build backend Docker image
        run: |
          docker build -t tokenization-backend:${{ github.sha }} ./backend

      - name: Save Docker image
        run: |
          docker save tokenization-backend:${{ github.sha }} > backend-image.tar

      - name: Upload Docker image artifact
        uses: actions/upload-artifact@v3
        with:
          name: backend-docker-image
          path: backend-image.tar

  # Job 5: Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build-docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download Docker image
        uses: actions/download-artifact@v3
        with:
          name: backend-docker-image

      - name: Load Docker image
        run: |
          docker load < backend-image.tar

      - name: Start services with Docker Compose
        run: |
          cp .env.example .env
          docker-compose up -d postgres
          sleep 10

      - name: Run integration tests
        run: |
          echo "Integration tests would run here"
          # Add actual integration test commands

      - name: Stop services
        if: always()
        run: |
          docker-compose down -v

  # Job 6: Publish Results
  publish-results:
    name: Publish Test Results
    runs-on: ubuntu-latest
    needs: [test-contracts, test-backend]
    if: always()

    steps:
      - name: Download contract coverage
        uses: actions/download-artifact@v3
        with:
          name: contract-coverage
        continue-on-error: true

      - name: Download backend coverage
        uses: actions/download-artifact@v3
        with:
          name: backend-coverage
        continue-on-error: true

      - name: Publish coverage summary
        run: |
          echo "## Test Coverage Summary" >> $GITHUB_STEP_SUMMARY
          echo "Coverage reports have been generated and uploaded as artifacts." >> $GITHUB_STEP_SUMMARY
          echo "Download the artifacts to view detailed coverage reports." >> $GITHUB_STEP_SUMMARY